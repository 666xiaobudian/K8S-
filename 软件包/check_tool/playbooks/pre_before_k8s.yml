---
- name: K8S前置准备工作——bind9安装部署（DNS服务）Check named.conf
  hosts: k8s_11
  gather_facts: no
  tasks:
    - name: Gather internal IP address
      ansible.builtin.setup:
        filter: ansible_default_ipv4

    - name: Read /etc/named.conf
      ansible.builtin.slurp:
        src: /etc/named.conf
      register: named_conf_content

    - name: Check the content of /etc/named.conf
      ansible.builtin.assert:
        that:
          - "'listen-on port 53 { {{ ansible_default_ipv4.address }}; };' in named_conf_content.content | b64decode"
          - "'allow-query     { any; };' in named_conf_content.content | b64decode"
          - "'forwarders' in named_conf_content.content | b64decode"
          - "'dnssec-enable no;' in named_conf_content.content | b64decode"
          - "'dnssec-validation no;' in named_conf_content.content | b64decode"
          - "'listen-on-v6 port 53 { ::1; };' not in named_conf_content.content | b64decode"
        fail_msg: "Error: /etc/named.conf does not have the required content."
        success_msg: "Success: /etc/named.conf has the required content."

    - name: Run named-checkconf command
      ansible.builtin.command:
        cmd: named-checkconf
      register: named_checkconf_result
      ignore_errors: yes

    - name: Check if named-checkconf has no output
      ansible.builtin.assert:
        that:
          - "named_checkconf_result.stdout == ''"
          - "named_checkconf_result.stderr == ''"
        fail_msg: "Error: named-checkconf returned output: {{ named_checkconf_result.stdout }} {{ named_checkconf_result.stderr }}"
        success_msg: "Success: named-checkconf returned no output."

    - name: Read /etc/named.rfc1912.zones
      ansible.builtin.slurp:
        src: /etc/named.rfc1912.zones
      register: named_rfc1912_zones_content

    - name: Check the content of /etc/named.rfc1912.zones
      ansible.builtin.assert:
        that:
          - "'zone \"host.com\" IN {' in named_rfc1912_zones_content.content | b64decode"
          - "'type  master;' in named_rfc1912_zones_content.content | b64decode"
          - "'file  \"host.com.zone\";' in named_rfc1912_zones_content.content | b64decode"
          - "'allow-update { {{ ansible_default_ipv4.address }}; };' in named_rfc1912_zones_content.content | b64decode"
          - "'zone \"od.com\" IN {' in named_rfc1912_zones_content.content | b64decode"
          - "'type  master;' in named_rfc1912_zones_content.content | b64decode"
          - "'file  \"od.com.zone\";' in named_rfc1912_zones_content.content | b64decode"
          - "'allow-update { {{ ansible_default_ipv4.address }}; };' in named_rfc1912_zones_content.content | b64decode"
        fail_msg: "Error: /etc/named.rfc1912.zones does not have the required content."
        success_msg: "Success: /etc/named.rfc1912.zones has the required content."

    - name: Read /var/named/host.com.zone
      ansible.builtin.slurp:
        src: /var/named/host.com.zone
      register: host_com_zone_content

    - name: Check the content of /var/named/host.com.zone
      ansible.builtin.assert:
        that:
          - "'$ORIGIN host.com.' in host_com_zone_content.content | b64decode"
          - "'$TTL 600' in host_com_zone_content.content | b64decode"
          - "'dns.host.com. dnsadmin.host.com. (' in host_com_zone_content.content | b64decode"
          - "'10800' in host_com_zone_content.content | b64decode"
          - "'900' in host_com_zone_content.content | b64decode"
          - "'604800' in host_com_zone_content.content | b64decode"
          - "'86400' in host_com_zone_content.content | b64decode"
          - "')' in host_com_zone_content.content | b64decode"
          - "'NS   dns.host.com.' in host_com_zone_content.content | b64decode"
          - "'$TTL 60' in host_com_zone_content.content | b64decode"
          - "'dns                A    {{ ansible_default_ipv4.address }}' in host_com_zone_content.content | b64decode"
          - "'HDSS7-11           A    {{ ansible_default_ipv4.address }}' in host_com_zone_content.content | b64decode"
        fail_msg: "Error: /var/named/host.com.zone does not have the required content."
        success_msg: "Success: /var/named/host.com.zone has the required content."

    - name: Read /var/named/od.com.zone
      ansible.builtin.slurp:
        src: /var/named/od.com.zone
      register: od_com_zone_content

    - name: Check the content of /var/named/od.com.zone
      ansible.builtin.assert:
        that:
          - "'$ORIGIN od.com.' in od_com_zone_content.content | b64decode"
          - "'$TTL 600' in od_com_zone_content.content | b64decode"
          - "'dns.od.com. dnsadmin.od.com. (' in od_com_zone_content.content | b64decode"
          - "'10800' in od_com_zone_content.content | b64decode"
          - "'900' in od_com_zone_content.content | b64decode"
          - "'604800' in od_com_zone_content.content | b64decode"
          - "'86400' in od_com_zone_content.content | b64decode"
          - "')' in od_com_zone_content.content | b64decode"
          - "'NS   dns.od.com.' in od_com_zone_content.content | b64decode"
          - "'$TTL 60' in od_com_zone_content.content | b64decode"
          - "'dns                A    {{ ansible_default_ipv4.address }}' in od_com_zone_content.content | b64decode"
        fail_msg: "Error: /var/named/od.com.zone does not have the required content."
        success_msg: "Success: /var/named/od.com.zone has the required content."

    - name: Run named-checkconf command
      ansible.builtin.command:
        cmd: named-checkconf
      register: named_checkconf_result
      ignore_errors: yes

    - name: Check if named-checkconf has no output
      ansible.builtin.assert:
        that:
          - "named_checkconf_result.stdout == ''"
          - "named_checkconf_result.stderr == ''"
        fail_msg: "Error: named-checkconf returned output: {{ named_checkconf_result.stdout }} {{ named_checkconf_result.stderr }}"
        success_msg: "Success: named-checkconf returned no output.i"

- name: Check ifcfg-eth0 for specific content
  hosts: all
  gather_facts: no
  tasks:
    - name: Read /etc/sysconfig/network-scripts/ifcfg-eth0
      ansible.builtin.slurp:
        src: /etc/sysconfig/network-scripts/ifcfg-eth0
      register: ifcfg_eth0_content

    - name: Check if the content exists in ifcfg-eth0
      ansible.builtin.assert:
        that:
          - "'DNS1={{ hostvars['k8s_11']['ansible_host'] }}' in ifcfg_eth0_content.content | b64decode"
        fail_msg: "Error: DNS1={{ hostvars['k8s_11']['ansible_host'] }} not found in /etc/sysconfig/network-scripts/ifcfg-eth0."
        success_msg: "Success: DNS1={{ hostvars['k8s_11']['ansible_host'] }} found in /etc/sysconfig/network-scripts/ifcfg-eth0."

    - name: Read /etc/sysconfig/network-scripts/ifcfg-eth0
      ansible.builtin.slurp:
        src: /etc/sysconfig/network-scripts/ifcfg-eth0
      register: ifcfg_eth0_content

    - name: 检查互联网连接
      command: ping -c 1 baidu.com
      register: ping_result
      changed_when: false
      failed_when: ping_result.rc != 0

    - name: 检查互联网连接结果
      assert:
        that: ping_result.rc == 0
        fail_msg: "无法Ping通 baidu.com"
        success_msg: "成功Ping通 baidu.com"

- name: Check the /opt/certs/ca-csr.json of k8s_200
  hosts: k8s_200
  gather_facts: false
  tasks:
    - name: 读取文件内容
      shell: cat /opt/certs/ca-csr.json
      register: file_content
      changed_when: false

    - name: 检查文件内容中是否包含数字
      assert:
        that: "'1752000' in file_content.stdout"
        fail_msg: "授权时间较短，请设置为1752000h"
        success_msg: "授权时间合理，有200年年限"

- name: K8S前置工作——部署docke环境
  hosts: 
    - k8s_21
    - k8s_22
    - k8s_200
  gather_facts: false
  tasks:
    - name: 检查是否包含 /data/docker
      command: grep -q '/data/docker' /etc/docker/daemon.json
      register: contains_data_docker
      changed_when: false
      failed_when: contains_data_docker.rc != 0

    - name: 检查是否包含 overlay2
      command: grep -q 'overlay2' /etc/docker/daemon.json
      register: contains_overlay2
      changed_when: false
      failed_when: contains_overlay2.rc != 0

    - name: 提取IP地址中的数字
      shell: echo "{{ inventory_hostname }}" | awk -F "_" '{print $NF}'
      register: ip_number
      changed_when: false

    - name: 检查是否包含 172.7.xx.1/24
      command: grep -q '172.7.{{ ip_number.stdout }}.1/24' /etc/docker/daemon.json
      register: contains_ip
      changed_when: false
      failed_when: contains_ip.rc != 0

    - name: 检查文件内容
      assert:
        that:
          - contains_data_docker.rc == 0
          - contains_overlay2.rc == 0
          - contains_ip.rc == 0
        fail_msg: "文件内容不符合要求"
        success_msg: "文件内容符合要求"

- name: K8S前置工作——部署harbor仓库
  hosts: k8s_200
  gather_facts: false
  tasks:
    - name: 检查文件内容
      command: cat /opt/harbor/harbor.yml
      register: file_content
      changed_when: false

    - name: 检查port配置是否正确
      assert:
        that: "'180' in file_content.stdout"
        fail_msg: "/opt/harbor/harbor.yml文件不包含180"
        success_msg: "/opt/harbor/harbor.yml文件包含180"

    - name: 检查data_volume配置是否正确
      assert:
        that: "'/data/harbor' in file_content.stdout"
        fail_msg: "/opt/harbor/harbor.yml文件不包含/data/harbor"
        success_msg: "/opt/harbor/harbor.yml文件包含/data/harbor"

    - name: 检查location配置是否正确
      assert:
        that: "'/data/harbor/logs' in file_content.stdout"
        fail_msg: "/opt/harbor/harbor.yml文件不包含/data/harbor/logs"
        success_msg: "/opt/harbor/harbor.yml文件包含/data/harbor/logs"

    - name: 读取文件内容
      shell: cat /etc/nginx/conf.d/harbor.od.com.conf
      register: file_content
      changed_when: false

    - name: 检查是否包含 listen 80
      assert:
        that: "'listen       80' in file_content.stdout"
        fail_msg: "/etc/nginx/conf.d/harbor.od.com.conf文件不包含 'listen       80'"
        success_msg: "/etc/nginx/conf.d/harbor.od.com.conf文件包含 'listen       80'"

    - name: 检查是否包含 server_name harbor.od.com
      assert:
        that: "'server_name  harbor.od.com' in file_content.stdout"
        fail_msg: "/etc/nginx/conf.d/harbor.od.com.conf文件不包含 'server_name  harbor.od.com'"
        success_msg: "/etc/nginx/conf.d/harbor.od.com.conf文件包含 'server_name  harbor.od.com'"

    - name: 检查是否包含 180
      assert:
        that: "'180' in file_content.stdout"
        fail_msg: "/etc/nginx/conf.d/harbor.od.com.conf文件不包含 '180'"
        success_msg: "/etc/nginx/conf.d/harbor.od.com.conf文件包含 '180'"

    - name: 检查Nginx服务状态
      command: systemctl is-enabled nginx
      register: nginx_status
      changed_when: false

    - name: 检查是否启用了Nginx服务
      assert:
        that: nginx_status.stdout == 'enabled'
        fail_msg: "Nginx服务未启用"
        success_msg: "Nginx服务已启用"
